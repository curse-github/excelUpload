"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MSTimer = void 0;
/**
 * Timer - measures call-rate of a function and the distribution of the duration of all calls
 */
const perf_hooks_1 = require("perf_hooks");
const rawData_1 = require("../rawData");
const tracing_1 = require("../tracing");
const writer_1 = require("../writer");
/**
 * TODO: allow cutomization
 * all in millsecond
 */
const fast = 1;
const normal = 20;
const MSTimer = (fn) => {
    /* eslint-disable  @typescript-eslint/no-explicit-any */
    /* eslint-disable  @typescript-eslint/explicit-module-boundary-types */
    return (target, propertyKey, descriptor) => {
        const originalMethod = descriptor.value;
        /**
         * get essential properties
         */
        const data = {
            traceId: (0, tracing_1.traceId)(),
            file: fn,
            class: target.constructor.name,
            method: originalMethod.name,
            timestamp: Date.now(),
        };
        if (originalMethod.constructor.name === "AsyncFunction") {
            descriptor.value = async function (...args) {
                const start = perf_hooks_1.performance.now();
                const result = await originalMethod.apply(this, args);
                const end = perf_hooks_1.performance.now();
                const duration = end - start;
                let severity;
                if (duration > normal) {
                    severity = rawData_1.TimerSeverity.Slow;
                }
                else if (duration > fast) {
                    severity = rawData_1.TimerSeverity.Normal;
                }
                else {
                    severity = rawData_1.TimerSeverity.Fast;
                }
                const timerData = {
                    duration: duration,
                    severity: severity,
                };
                data.timer = timerData;
                await (0, writer_1.appendOutput)(data);
                return result;
            };
        }
        else {
            descriptor.value = function (...args) {
                const start = perf_hooks_1.performance.now();
                const result = originalMethod.apply(this, args);
                const end = perf_hooks_1.performance.now();
                const duration = end - start;
                let severity;
                if (duration > normal) {
                    severity = rawData_1.TimerSeverity.Slow;
                }
                else if (duration > fast) {
                    severity = rawData_1.TimerSeverity.Normal;
                }
                else {
                    severity = rawData_1.TimerSeverity.Fast;
                }
                const timerData = {
                    duration: duration,
                    severity: severity,
                };
                data.timer = timerData;
                (0, writer_1.appendOutputSync)(data);
                return result;
            };
        }
        return descriptor;
    };
};
exports.MSTimer = MSTimer;
//# sourceMappingURL=timer.js.map