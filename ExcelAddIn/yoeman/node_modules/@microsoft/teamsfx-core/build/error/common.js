"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoEnvFilesError = exports.InputValidationError = exports.MissingRequiredInputError = exports.InstallSoftwareError = exports.UnhandledUserError = exports.UnhandledError = exports.ReadFileError = exports.JSONSyntaxError = exports.InvalidProjectError = exports.InvalidActionInputError = exports.MissingEnvironmentVariablesError = exports.FileNotFoundError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const lodash_1 = require("lodash");
const localizeUtils_1 = require("../common/localizeUtils");
const globalVars_1 = require("../core/globalVars");
class FileNotFoundError extends teamsfx_api_1.UserError {
    constructor(source, filePath, helpLink) {
        const key = "error.common.FileNotFoundError";
        const errorOptions = {
            source: lodash_1.camelCase(source),
            name: "FileNotFoundError",
            message: localizeUtils_1.getDefaultString(key, filePath),
            displayMessage: localizeUtils_1.getLocalizedString(key, filePath),
            helpLink: helpLink,
        };
        super(errorOptions);
    }
}
exports.FileNotFoundError = FileNotFoundError;
class MissingEnvironmentVariablesError extends teamsfx_api_1.UserError {
    constructor(source, variableNames, filePath, helpLink) {
        const templateFilePath = filePath || globalVars_1.globalVars.ymlFilePath || "";
        const envFilePath = globalVars_1.globalVars.envFilePath || "";
        const key = "error.common.MissingEnvironmentVariablesError";
        const errorOptions = {
            source: lodash_1.camelCase(source),
            name: "MissingEnvironmentVariablesError",
            message: localizeUtils_1.getDefaultString(key, variableNames, templateFilePath, envFilePath),
            displayMessage: localizeUtils_1.getLocalizedString(key, variableNames, templateFilePath, envFilePath),
            helpLink: helpLink || "https://aka.ms/teamsfx-v5.0-guide#environments",
        };
        super(errorOptions);
    }
}
exports.MissingEnvironmentVariablesError = MissingEnvironmentVariablesError;
class InvalidActionInputError extends teamsfx_api_1.UserError {
    constructor(actionName, parameters, helpLink) {
        const key = "error.yaml.InvalidActionInputError";
        const errorOptions = {
            source: lodash_1.camelCase(actionName),
            name: "InvalidActionInputError",
            message: localizeUtils_1.getDefaultString(key, actionName, parameters.join(","), globalVars_1.globalVars.ymlFilePath),
            displayMessage: localizeUtils_1.getLocalizedString(key, actionName, parameters.join(","), globalVars_1.globalVars.ymlFilePath),
            helpLink: helpLink || "https://aka.ms/teamsfx-actions",
        };
        super(errorOptions);
    }
}
exports.InvalidActionInputError = InvalidActionInputError;
class InvalidProjectError extends teamsfx_api_1.UserError {
    constructor() {
        super({
            message: localizeUtils_1.getDefaultString("error.common.InvalidProjectError"),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.InvalidProjectError"),
            source: "coordinator",
        });
    }
}
exports.InvalidProjectError = InvalidProjectError;
class JSONSyntaxError extends teamsfx_api_1.UserError {
    constructor(filePathOrContent, e) {
        super({
            message: localizeUtils_1.getDefaultString("error.common.JSONSyntaxError", filePathOrContent, e.message),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.JSONSyntaxError", filePathOrContent, e.message),
            source: "coordinator",
        });
        super.stack = e.stack;
    }
}
exports.JSONSyntaxError = JSONSyntaxError;
class ReadFileError extends teamsfx_api_1.SystemError {
    constructor(e, source) {
        super({
            source: source || "unknown",
            message: e.message || localizeUtils_1.getDefaultString("error.common.ReadFileError"),
            displayMessage: e.message || localizeUtils_1.getLocalizedString("error.common.ReadFileError"),
        });
        if (e.stack)
            super.stack = e.stack;
    }
}
exports.ReadFileError = ReadFileError;
class UnhandledError extends teamsfx_api_1.SystemError {
    constructor(e, source) {
        super({
            source: lodash_1.camelCase(source || "unknown"),
            message: localizeUtils_1.getDefaultString("error.common.UnhandledError", source || "", e.message || JSON.stringify(e)),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.UnhandledError", source || "", e.message || JSON.stringify(e)),
        });
        if (e.stack)
            super.stack = e.stack;
    }
}
exports.UnhandledError = UnhandledError;
class UnhandledUserError extends teamsfx_api_1.UserError {
    constructor(e, source, helpLink) {
        super({
            source: lodash_1.camelCase(source || "unknown"),
            message: localizeUtils_1.getDefaultString("error.common.UnhandledError", source || "", e.message || JSON.stringify(e)),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.UnhandledError", source || "", e.message || JSON.stringify(e)),
            helpLink: helpLink,
        });
        if (e.stack)
            super.stack = e.stack;
    }
}
exports.UnhandledUserError = UnhandledUserError;
class InstallSoftwareError extends teamsfx_api_1.UserError {
    constructor(source, nameAndVersion, helpLink) {
        super({
            source: lodash_1.camelCase(source || "common"),
            message: localizeUtils_1.getDefaultString("error.common.InstallSoftwareError", nameAndVersion),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.InstallSoftwareError", nameAndVersion),
        });
        if (helpLink)
            this.helpLink = helpLink;
    }
}
exports.InstallSoftwareError = InstallSoftwareError;
class MissingRequiredInputError extends teamsfx_api_1.UserError {
    constructor(name) {
        super({
            source: "coordinator",
            message: localizeUtils_1.getDefaultString("error.common.MissingRequiredInputError", name),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.MissingRequiredInputError", name),
        });
    }
}
exports.MissingRequiredInputError = MissingRequiredInputError;
class InputValidationError extends teamsfx_api_1.UserError {
    constructor(name, reason) {
        super({
            source: "coordinator",
            message: localizeUtils_1.getDefaultString("error.common.InputValidationError", name, reason),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.InputValidationError", name, reason),
        });
    }
}
exports.InputValidationError = InputValidationError;
class NoEnvFilesError extends teamsfx_api_1.UserError {
    constructor(source) {
        const key = "error.common.NoEnvFilesError";
        const errorOptions = {
            source: lodash_1.camelCase(source),
            name: "NoEnvFilesError",
            message: localizeUtils_1.getDefaultString(key),
            displayMessage: localizeUtils_1.getLocalizedString(key),
        };
        super(errorOptions);
    }
}
exports.NoEnvFilesError = NoEnvFilesError;
//# sourceMappingURL=common.js.map