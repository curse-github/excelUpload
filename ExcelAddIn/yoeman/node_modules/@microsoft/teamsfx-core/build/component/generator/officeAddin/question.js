"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getQuestionsForScaffolding = exports.getTemplate = exports.AddinProjectManifestQuestion = exports.AddinProjectFolderQuestion = exports.OfficeHostQuestion = exports.AddinLanguageQuestion = exports.QuestionName = exports.ImportAddinProjectItem = exports.OfficeAddinItems = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../common/localizeUtils");
const constants_1 = require("../../constants");
const projectsJsonData_1 = tslib_1.__importDefault(require("./config/projectsJsonData"));
const jsonData = new projectsJsonData_1.default();
const OfficeAddinItems = () => jsonData.getProjectTemplateNames().map((template) => ({
    id: template,
    label: localizeUtils_1.getLocalizedString(jsonData.getProjectDisplayName(template)),
    detail: localizeUtils_1.getLocalizedString(jsonData.getProjectDetails(template)),
    description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.previewOnWindow"),
}));
exports.OfficeAddinItems = OfficeAddinItems;
// TODO: add localization strings
function ImportAddinProjectItem() {
    return {
        id: "import-addin-project",
        label: localizeUtils_1.getLocalizedString("core.importAddin.label"),
        cliName: "import",
        detail: localizeUtils_1.getLocalizedString("core.importAddin.detail"),
        description: localizeUtils_1.getLocalizedString("core.createProjectQuestion.option.description.previewOnWindow"),
    };
}
exports.ImportAddinProjectItem = ImportAddinProjectItem;
var QuestionName;
(function (QuestionName) {
    QuestionName["AddinLanguageQuestion"] = "addin-language";
    QuestionName["AddinNameQuestion"] = "addin-name";
    QuestionName["AddinProjectFolderQuestion"] = "addin-project-folder";
    QuestionName["AddinProjectManifestQuestion"] = "addin-project-manifest";
    QuestionName["AddinTemplateSelectQuestion"] = "addin-template-select";
    QuestionName["OfficeHostQuestion"] = "addin-host";
})(QuestionName = exports.QuestionName || (exports.QuestionName = {}));
exports.AddinLanguageQuestion = {
    type: "singleSelect",
    name: QuestionName.AddinLanguageQuestion,
    title: "Add-in Language",
    staticOptions: [],
    dynamicOptions: async (inputs) => {
        const template = exports.getTemplate(inputs);
        const supportedTypes = jsonData.getSupportedScriptTypes(template);
        const options = supportedTypes.map((language) => ({ label: language, id: language }));
        return options.length > 0 ? options : [{ label: "No Options", id: "No Options" }];
    },
    default: async (inputs) => {
        const template = exports.getTemplate(inputs);
        const options = jsonData.getSupportedScriptTypes(template);
        return options[0] || "No Options";
    },
    skipSingleOption: true,
};
exports.OfficeHostQuestion = {
    type: "singleSelect",
    name: QuestionName.OfficeHostQuestion,
    title: "Add-in Host",
    staticOptions: [],
    dynamicOptions: async (inputs) => {
        const template = exports.getTemplate(inputs);
        const getHostTemplateNames = jsonData.getHostTemplateNames(template);
        const options = getHostTemplateNames.map((host) => ({
            label: jsonData.getHostDisplayName(host),
            id: host,
        }));
        return options.length > 0 ? options : [{ label: "No Options", id: "No Options" }];
    },
    default: async (inputs) => {
        const template = exports.getTemplate(inputs);
        const options = jsonData.getHostTemplateNames(template);
        return options[0] || "No Options";
    },
    skipSingleOption: true,
};
exports.AddinProjectFolderQuestion = {
    type: "folder",
    name: QuestionName.AddinProjectFolderQuestion,
    title: "Existing add-in project folder",
};
exports.AddinProjectManifestQuestion = {
    type: "singleFile",
    name: QuestionName.AddinProjectManifestQuestion,
    title: "Select import project manifest file",
};
const getTemplate = (inputs) => {
    const capabilities = inputs["capabilities"];
    const templates = jsonData.getProjectTemplateNames();
    const foundTemplate = templates.find((template) => {
        return capabilities.includes(template);
    });
    return foundTemplate !== null && foundTemplate !== void 0 ? foundTemplate : "";
};
exports.getTemplate = getTemplate;
const getQuestionsForScaffolding = () => {
    const importNode = new teamsfx_api_1.QTreeNode({ type: "group" });
    importNode.condition = {
        validFunc: (input, inputs) => {
            if (!inputs) {
                return "Invalid inputs";
            }
            const cap = inputs[constants_1.AzureSolutionQuestionNames.Capabilities];
            if (cap === ImportAddinProjectItem().id) {
                return undefined;
            }
            return "Office Addin is not selected";
        },
    };
    importNode.addChild(new teamsfx_api_1.QTreeNode(exports.AddinProjectFolderQuestion));
    importNode.addChild(new teamsfx_api_1.QTreeNode(exports.AddinProjectManifestQuestion));
    const templateNode = new teamsfx_api_1.QTreeNode({ type: "group" });
    templateNode.condition = {
        validFunc: (input, inputs) => {
            if (!inputs) {
                return "Invalid inputs";
            }
            const cap = inputs[constants_1.AzureSolutionQuestionNames.Capabilities];
            const addinOptionIds = [
                ...exports.OfficeAddinItems().map((item) => {
                    return item.id;
                }),
            ];
            if (addinOptionIds.includes(cap)) {
                return undefined;
            }
            return "Office Addin is not selected";
        },
    };
    templateNode.addChild(new teamsfx_api_1.QTreeNode(exports.AddinLanguageQuestion));
    templateNode.addChild(new teamsfx_api_1.QTreeNode(exports.OfficeHostQuestion));
    const root = new teamsfx_api_1.QTreeNode({ type: "group" });
    root.addChild(importNode);
    root.addChild(templateNode);
    return root;
};
exports.getQuestionsForScaffolding = getQuestionsForScaffolding;
//# sourceMappingURL=question.js.map