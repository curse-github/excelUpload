/// <reference types="node" />
import AdmZip from "adm-zip";
import { LogProvider } from "@microsoft/teamsfx-api";
export interface GeneratorContext {
    name: string;
    destination: string;
    logProvider: LogProvider;
    tryLimits?: number;
    timeoutInMs?: number;
    relativePath?: string;
    url?: string;
    zip?: AdmZip;
    fallback?: boolean;
    cancelDownloading?: boolean;
    fileNameReplaceFn?: (name: string, data: Buffer) => string;
    fileDataReplaceFn?: (name: string, data: Buffer) => Buffer | string;
    onActionStart?: (action: GeneratorAction, context: GeneratorContext) => Promise<void>;
    onActionEnd?: (action: GeneratorAction, context: GeneratorContext) => Promise<void>;
    onActionError?: (action: GeneratorAction, context: GeneratorContext, error: Error) => Promise<void>;
}
export interface GeneratorAction {
    name: string;
    run: (context: GeneratorContext) => Promise<void>;
}
export declare enum GeneratorActionName {
    FetchTemplateZipFromSourceCode = "FetchTemplateZipFromSourceCodeAction",
    FetchTemplateUrlWithTag = "FetchTemplatesUrlWithTag",
    FetchZipFromUrl = "FetchZipFromUrl",
    FetchTemplateZipFromLocal = "FetchTemplateZipFromLocal",
    DownloadDirectory = "DownloadDirectory",
    Unzip = "Unzip"
}
export declare const fetchTemplateZipFromSourceCodeAction: GeneratorAction;
export declare const downloadDirectoryAction: GeneratorAction;
export declare const fetchTemplateUrlWithTagAction: GeneratorAction;
export declare const fetchZipFromUrlAction: GeneratorAction;
export declare const fetchTemplateZipFromLocalAction: GeneratorAction;
export declare const unzipAction: GeneratorAction;
export declare const TemplateActionSeq: GeneratorAction[];
export declare const SampleActionSeq: GeneratorAction[];
export declare const DownloadDirectoryActionSeq: GeneratorAction[];
//# sourceMappingURL=generatorAction.d.ts.map