"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageSelectOptionsHelper = exports.SPFxVersionOptionIds = void 0;
const tslib_1 = require("tslib");
const localizeUtils_1 = require("../../../../common/localizeUtils");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
const semver_1 = tslib_1.__importDefault(require("semver"));
var SPFxVersionOptionIds;
(function (SPFxVersionOptionIds) {
    SPFxVersionOptionIds["installLocally"] = "true";
    SPFxVersionOptionIds["globalPackage"] = "false";
})(SPFxVersionOptionIds = exports.SPFxVersionOptionIds || (exports.SPFxVersionOptionIds = {}));
class PackageSelectOptionsHelper {
    static async loadOptions() {
        const versions = await Promise.all([
            utils_1.Utils.findGloballyInstalledVersion(undefined, constants_1.Constants.GeneratorPackageName, 0, false),
            utils_1.Utils.findLatestVersion(undefined, constants_1.Constants.GeneratorPackageName, 5),
            utils_1.Utils.findGloballyInstalledVersion(undefined, constants_1.Constants.YeomanPackageName, 0, false),
        ]);
        PackageSelectOptionsHelper.globalPackageVersions[0] = versions[0];
        PackageSelectOptionsHelper.globalPackageVersions[1] = versions[2];
        PackageSelectOptionsHelper.latestSpGeneratorVersion = versions[1];
        PackageSelectOptionsHelper.options = [
            {
                id: SPFxVersionOptionIds.installLocally,
                label: versions[1] !== undefined
                    ? localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.installLocally.withVersion.label", "v" + versions[1])
                    : localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.installLocally.noVersion.label"),
            },
            {
                id: SPFxVersionOptionIds.globalPackage,
                label: versions[0] !== undefined
                    ? localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.useGlobalPackage.withVersion.label", "v" + versions[0])
                    : localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.useGlobalPackage.noVersion.label"),
                description: localizeUtils_1.getLocalizedString("plugins.spfx.questions.packageSelect.useGlobalPackage.detail", constants_1.Constants.RecommendedLowestSpfxVersion),
            },
        ];
    }
    static getOptions() {
        return PackageSelectOptionsHelper.options;
    }
    static clear() {
        PackageSelectOptionsHelper.options = [];
        PackageSelectOptionsHelper.globalPackageVersions = [undefined, undefined];
        PackageSelectOptionsHelper.latestSpGeneratorVersion = undefined;
    }
    static checkGlobalPackages() {
        return (!!PackageSelectOptionsHelper.globalPackageVersions[0] &&
            !!PackageSelectOptionsHelper.globalPackageVersions[1]);
    }
    static getLatestSpGeneratorVersion() {
        return PackageSelectOptionsHelper.latestSpGeneratorVersion;
    }
    static isLowerThanRecommendedVersion() {
        const installedVersion = PackageSelectOptionsHelper.globalPackageVersions[0];
        if (!installedVersion) {
            return undefined;
        }
        const recommendedLowestVersion = constants_1.Constants.RecommendedLowestSpfxVersion.substring(1); // remove "v"
        return semver_1.default.lte(installedVersion, recommendedLowestVersion);
    }
}
exports.PackageSelectOptionsHelper = PackageSelectOptionsHelper;
PackageSelectOptionsHelper.options = [];
PackageSelectOptionsHelper.globalPackageVersions = [undefined, undefined];
PackageSelectOptionsHelper.latestSpGeneratorVersion = undefined;
//# sourceMappingURL=question-helper.js.map