"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorMessage = void 0;
const localizeUtils_1 = require("../../../common/localizeUtils");
const constants_1 = require("./constants");
class ErrorMessage {
}
exports.ErrorMessage = ErrorMessage;
ErrorMessage.LinkHelpMessage = (link) => localizeUtils_1.getLocalizedString("error.sql.LinkHelpMessage", link);
ErrorMessage.SqlInputError = {
    name: "SqlInputError",
    message: () => [
        localizeUtils_1.getDefaultString("error.sql.SqlInputError"),
        localizeUtils_1.getLocalizedString("error.sql.SqlInputError"),
    ],
};
ErrorMessage.SqlAskInputError = {
    name: "SqlAskInputError",
    message: () => [
        localizeUtils_1.getDefaultString("error.sql.SqlAskInputError"),
        localizeUtils_1.getLocalizedString("error.sql.SqlAskInputError"),
    ],
};
ErrorMessage.SqlEndpointError = {
    name: "SqlEndpointError",
    message: (sqlName) => [
        localizeUtils_1.getDefaultString("error.sql.SqlEndpointError", sqlName),
        localizeUtils_1.getLocalizedString("error.sql.SqlEndpointError", sqlName),
    ],
};
ErrorMessage.DatabaseUserCreateError = {
    name: "DatabaseUserCreateError",
    message: (database, user) => [
        localizeUtils_1.getDefaultString("error.sql.DatabaseUserCreateError", user, database),
        localizeUtils_1.getLocalizedString("error.sql.DatabaseUserCreateError", user, database),
    ],
};
ErrorMessage.SqlAddAdminError = {
    name: "SqlAddAdminError",
    message: (account, detail = "") => [
        localizeUtils_1.getDefaultString("error.sql.SqlAddAdminError", account, detail),
        localizeUtils_1.getLocalizedString("error.sql.SqlAddAdminError", account, detail),
    ],
};
ErrorMessage.SqlLocalFirwallError = {
    name: "SqlLocalFirwallError",
    message: (sqlName, detail = "") => [
        localizeUtils_1.getDefaultString("error.sql.SqlLocalFirwallError", sqlName, detail),
        localizeUtils_1.getLocalizedString("error.sql.SqlLocalFirwallError", sqlName, detail),
    ],
};
ErrorMessage.SqlDeleteLocalFirwallError = {
    name: "SqlDeleteLocalFirwallError",
    message: (sqlName, detail = "") => [
        localizeUtils_1.getDefaultString("error.sql.SqlDeleteLocalFirwallError", sqlName, constants_1.Constants.firewall.localRule, detail),
        localizeUtils_1.getLocalizedString("error.sql.SqlDeleteLocalFirwallError", sqlName, constants_1.Constants.firewall.localRule, detail),
    ],
};
ErrorMessage.SqlUserInfoError = {
    name: "SqlUserInfoError",
    message: () => [
        localizeUtils_1.getDefaultString("error.sql.SqlUserInfoError"),
        localizeUtils_1.getLocalizedString("error.sql.SqlUserInfoError"),
    ],
};
ErrorMessage.SqlGetConfigError = {
    name: "SqlGetConfigError",
    message: (pluginId, configKey) => [
        localizeUtils_1.getDefaultString("error.sql.SqlGetConfigError", configKey, pluginId),
        localizeUtils_1.getLocalizedString("error.sql.SqlGetConfigError", configKey, pluginId),
    ],
};
ErrorMessage.SqlInvalidConfigError = {
    name: "SqlInvalidConfigError",
    message: (configKey, reason) => [
        localizeUtils_1.getDefaultString("error.sql.SqlInvalidConfigError", configKey, reason),
        localizeUtils_1.getLocalizedString("error.sql.SqlInvalidConfigError", configKey, reason),
    ],
};
ErrorMessage.SqlCheckError = {
    name: "SqlCheckError",
    message: (sqlName, detail = "") => [
        localizeUtils_1.getDefaultString("error.sql.SqlCheckError", sqlName, detail),
        localizeUtils_1.getLocalizedString("error.sql.SqlCheckError", sqlName, detail),
    ],
};
ErrorMessage.SqlCheckAdminError = {
    name: "SqlCheckAdminError",
    message: (identity, detail = "") => [
        localizeUtils_1.getDefaultString("error.sql.SqlCheckAdminError", identity, detail),
        localizeUtils_1.getLocalizedString("error.sql.SqlCheckAdminError", identity, detail),
    ],
};
ErrorMessage.UnhandledError = {
    name: "UnhandledError",
    message: () => ["Unhandled Error", "Unhandled Error"],
};
ErrorMessage.IdentityCredentialUndefine = (user, databaseName) => localizeUtils_1.getLocalizedString("error.sql.IdentityCredentialUndefine", user, databaseName);
ErrorMessage.ServicePrincipalWarning = (user, databaseName) => localizeUtils_1.getLocalizedString("error.sql.ServicePrincipalWarning", user, databaseName);
ErrorMessage.DomainCode = "AADSTS53000";
ErrorMessage.DomainError = localizeUtils_1.getLocalizedString("error.sql.DomainError", localizeUtils_1.getLocalizedString("error.sql.GetDetail"));
ErrorMessage.GuestAdminMessage = "Server identity does not have Azure Active Directory Readers permission";
ErrorMessage.FirewallErrorReg = /Client with IP address .*? is not allowed to access the server./g;
ErrorMessage.GuestAdminError = localizeUtils_1.getLocalizedString("error.sql.GuestAdminError", localizeUtils_1.getLocalizedString("error.sql.GetDetail"));
//# sourceMappingURL=errors.js.map