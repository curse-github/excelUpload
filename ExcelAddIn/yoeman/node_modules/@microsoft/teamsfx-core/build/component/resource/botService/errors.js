"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlreadyCreatedBotNotExist = exports.BotFrameworkConflictResultError = exports.BotFrameworkForbiddenResultError = exports.BotFrameworkNotAllowedToAcquireTokenError = exports.wrapError = exports.BotRegistrationNotFoundError = exports.ConfigUpdatingError = exports.ProvisionError = exports.CreateAADSecretError = exports.CreateAADAppError = exports.PluginError = exports.isPluginError = exports.isErrorWithMessage = exports.isHttpError = exports.ErrorType = void 0;
/**
 * @author zhijie <zhihuan@microsoft.com>
 */
const constants_1 = require("./constants");
const messages_1 = require("./messages");
const localizeUtils_1 = require("../../../common/localizeUtils");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const result_1 = require("./result");
const hostingError_1 = require("../../../common/azure-hosting/hostingError");
const errors_1 = require("../aadApp/errors");
const errorCodes_1 = require("../aadApp/errorCodes");
const constants_2 = require("../../../common/constants");
exports.ErrorType = {
    USER: "User",
    SYSTEM: "System",
};
function isHttpError(e) {
    return e instanceof Object && "response" in e;
}
exports.isHttpError = isHttpError;
function isErrorWithMessage(e) {
    return e instanceof Object && "message" in e;
}
exports.isErrorWithMessage = isErrorWithMessage;
function isPluginError(e) {
    return e instanceof Object && "innerError" in e;
}
exports.isPluginError = isPluginError;
function resolveInnerError(target, helpLinkMap) {
    var _a, _b, _c, _d, _e, _f;
    if (!target.innerError)
        return;
    const statusCode = isHttpError(target.innerError) ? (_a = target.innerError.response) === null || _a === void 0 ? void 0 : _a.status : 500;
    if (statusCode) {
        if (statusCode >= 400 && statusCode < 500) {
            target.errorType = exports.ErrorType.USER;
        }
        else {
            target.errorType = exports.ErrorType.SYSTEM;
        }
    }
    if (isHttpError(target.innerError)) {
        const errorCode = (_d = (_c = (_b = target.innerError.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.error) === null || _d === void 0 ? void 0 : _d.code;
        if (errorCode) {
            const helpLink = helpLinkMap.get(errorCode);
            if (helpLink)
                target.helpLink = helpLink;
        }
        // Try to concat error messages in response payload to expose specific reasons.
        // Based on https://learn.microsoft.com/en-us/graph/errors
        const errorMessage = (_f = (_e = target.innerError.response.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;
        if (errorMessage) {
            target.details[0] += errorMessage;
        }
    }
}
class PluginError extends Error {
    constructor(type, name, details, suggestions, innerError, helpLink) {
        super(details[0]);
        this.name = name;
        this.details = details;
        this.suggestions = suggestions;
        this.errorType = type;
        this.innerError = innerError;
        this.helpLink = helpLink;
        Object.setPrototypeOf(this, PluginError.prototype);
    }
    genMessage() {
        let msg = `${this.details[0]} `;
        if (this.suggestions.length > 0) {
            msg += localizeUtils_1.getDefaultString("plugins.bot.ErrorSuggestions", this.suggestions.join(" "));
        }
        return msg;
    }
    genDisplayMessage() {
        let msg = `${this.details[1]} `;
        if (this.suggestions.length > 0) {
            msg += localizeUtils_1.getLocalizedString("plugins.bot.ErrorSuggestions", this.suggestions.join(" "));
        }
        return msg;
    }
}
exports.PluginError = PluginError;
class CreateAADAppError extends PluginError {
    constructor(innerError) {
        super(exports.ErrorType.USER, errors_1.CreateAppError.name, errors_1.CreateAppError.message(), [], innerError);
        resolveInnerError(this, errorCodes_1.GraphErrorCodes);
    }
}
exports.CreateAADAppError = CreateAADAppError;
class CreateAADSecretError extends PluginError {
    constructor(innerError) {
        super(exports.ErrorType.USER, errors_1.CreateSecretError.name, errors_1.CreateSecretError.message(), [], innerError);
        resolveInnerError(this, errorCodes_1.GraphErrorCodes);
    }
}
exports.CreateAADSecretError = CreateAADSecretError;
class ProvisionError extends PluginError {
    constructor(resource, innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.PROVISION_ERROR, messages_1.Messages.FailToProvisionSomeResource(resource), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ProvisionError = ProvisionError;
class ConfigUpdatingError extends PluginError {
    constructor(configName, innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.CONFIG_UPDATING_ERROR, messages_1.Messages.FailToUpdateConfigs(configName), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ConfigUpdatingError = ConfigUpdatingError;
class BotRegistrationNotFoundError extends PluginError {
    constructor(botId, innerError) {
        super(exports.ErrorType.USER, constants_1.ErrorNames.BOT_REGISTRATION_NOTFOUND_ERROR, messages_1.Messages.BotRegistrationNotFoundWith(botId), [messages_1.Messages.CheckOutputLogAndTryToFix], innerError);
    }
}
exports.BotRegistrationNotFoundError = BotRegistrationNotFoundError;
//! context and name are only for telemetry, they may be empty if sendTelemetry is false
function wrapError(e) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    let errorMsg = isErrorWithMessage(e) ? e.message : "";
    const innerError = isPluginError(e) ? e.innerError : undefined;
    if (innerError) {
        errorMsg += localizeUtils_1.getLocalizedString("plugins.bot.DetailedError", isErrorWithMessage(innerError) ? innerError.message : "");
        if (isHttpError(innerError)) {
            if ((_b = (_a = innerError.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.errorMessage) {
                errorMsg += localizeUtils_1.getLocalizedString("plugins.bot.DetailedErrorReason", (_d = (_c = innerError.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.errorMessage);
            }
            else if ((_g = (_f = (_e = innerError.response) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.error) === null || _g === void 0 ? void 0 : _g.message) {
                // For errors return from Graph API
                errorMsg += localizeUtils_1.getLocalizedString("plugins.bot.DetailedErrorReason", (_k = (_j = (_h = innerError.response) === null || _h === void 0 ? void 0 : _h.data) === null || _j === void 0 ? void 0 : _j.error) === null || _k === void 0 ? void 0 : _k.message);
            }
            else if ((_m = (_l = innerError.response) === null || _l === void 0 ? void 0 : _l.data) === null || _m === void 0 ? void 0 : _m.errors) {
                // For errors return from App Studio API
                errorMsg += localizeUtils_1.getLocalizedString("plugins.bot.DetailedErrorReason", JSON.stringify((_p = (_o = innerError.response) === null || _o === void 0 ? void 0 : _o.data) === null || _p === void 0 ? void 0 : _p.errors));
            }
        }
    }
    if (e instanceof teamsfx_api_1.UserError || e instanceof teamsfx_api_1.SystemError) {
        const res = teamsfx_api_1.err(e);
        return res;
    }
    if (e instanceof PluginError || e instanceof hostingError_1.CommonHostingError) {
        const message = e.genMessage();
        const displayMessage = e.genDisplayMessage();
        const result = e instanceof PluginError && e.errorType === exports.ErrorType.SYSTEM
            ? result_1.FxBotPluginResultFactory.SystemError(e.name, [message, displayMessage], e.innerError)
            : result_1.FxBotPluginResultFactory.UserError(e.name, [message, displayMessage], e.innerError, e instanceof PluginError ? e.helpLink : "");
        return result;
    }
    else {
        // Unrecognized Exception.
        const UnhandledErrorCode = "UnhandledError";
        return result_1.FxBotPluginResultFactory.SystemError(UnhandledErrorCode, [errorMsg, errorMsg], innerError);
    }
}
exports.wrapError = wrapError;
class BotFrameworkNotAllowedToAcquireTokenError extends PluginError {
    constructor() {
        super(exports.ErrorType.USER, constants_1.ErrorNames.ACQUIRE_BOT_FRAMEWORK_TOKEN_ERROR, messages_1.Messages.NotAllowedToAcquireBotFrameworkToken(), [messages_1.Messages.CheckOutputLogAndTryToFix]);
    }
}
exports.BotFrameworkNotAllowedToAcquireTokenError = BotFrameworkNotAllowedToAcquireTokenError;
class BotFrameworkForbiddenResultError extends PluginError {
    constructor() {
        super(exports.ErrorType.USER, constants_1.ErrorNames.FORBIDDEN_RESULT_BOT_FRAMEWORK_ERROR, messages_1.Messages.BotProvisionReturnsForbiddenResult(), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep]);
    }
}
exports.BotFrameworkForbiddenResultError = BotFrameworkForbiddenResultError;
class BotFrameworkConflictResultError extends PluginError {
    constructor() {
        super(exports.ErrorType.USER, constants_1.ErrorNames.CONFLICT_RESULT_BOT_FRAMEWORK_ERROR, messages_1.Messages.BotProvisionReturnsConflictResult(), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep]);
    }
}
exports.BotFrameworkConflictResultError = BotFrameworkConflictResultError;
const AlreadyCreatedBotNotExist = (botId, innerError) => {
    return new teamsfx_api_1.UserError({
        source: "RegisterBot",
        name: "AlreadyCreatedBotNotExist",
        message: localizeUtils_1.getLocalizedString("plugins.bot.FailedToGetAlreadyCreatedBot", botId, constants_2.HelpLinks.SwitchAccountOrSub),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.bot.FailedToGetAlreadyCreatedBot", botId, constants_2.HelpLinks.SwitchAccountOrSub),
        error: innerError,
    });
};
exports.AlreadyCreatedBotNotExist = AlreadyCreatedBotNotExist;
//# sourceMappingURL=errors.js.map