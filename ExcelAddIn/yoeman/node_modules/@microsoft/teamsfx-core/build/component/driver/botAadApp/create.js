"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateBotAadAppDriver = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const perf_hooks_1 = require("perf_hooks");
const axios_1 = tslib_1.__importDefault(require("axios"));
const common_1 = require("../../utils/common");
const remoteBotRegistration_1 = require("../../resource/botService/botRegistration/remoteBotRegistration");
const lib_1 = require("@feathersjs/hooks/lib");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const constants_1 = require("./utility/constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
const constants_2 = require("../../resource/botService/botRegistration/constants");
const utils_1 = require("../util/utils");
const updateProgress_1 = require("../middleware/updateProgress");
const unexpectedEmptyBotPasswordError_1 = require("./error/unexpectedEmptyBotPasswordError");
const common_2 = require("../../../error/common");
const actionName = "botAadApp/create"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/botaadapp-create";
const successRegisterBotAad = `${actionName}/success`;
const propertyKeys = {
    reusingExistingBotAad: "reuse-existing-bot-aad",
    registerBotAadTime: "register-bot-aad-time",
};
const defaultOutputEnvVarNames = {
    botId: "BOT_ID",
    botPassword: "SECRET_BOT_PASSWORD",
};
let CreateBotAadAppDriver = class CreateBotAadAppDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.botAadApp.create.description");
    }
    async run(args, context) {
        return common_1.wrapRun(async () => {
            const result = await this.handler(args, context);
            return result.output;
        });
    }
    async execute(args, ctx, outputEnvVarNames) {
        let summaries = [];
        const outputResult = await common_1.wrapRun(async () => {
            const result = await this.handler(args, ctx, outputEnvVarNames);
            summaries = result.summaries;
            return result.output;
        });
        return {
            result: outputResult,
            summaries,
        };
    }
    async handler(args, context, outputEnvVarNames) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        try {
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.startExecuteDriver, actionName));
            this.validateArgs(args);
            // TODO: Remove this logic when config manager forces schema validation
            if (!outputEnvVarNames) {
                outputEnvVarNames = new Map(Object.entries(defaultOutputEnvVarNames));
            }
            const botAadAppState = utils_1.loadStateFromEnv(outputEnvVarNames);
            // If it's the case of a valid bot id with an empty bot password, then throw an error
            if (botAadAppState.botId && !botAadAppState.botPassword) {
                throw new unexpectedEmptyBotPasswordError_1.UnexpectedEmptyBotPasswordError(actionName, helpLink);
            }
            const botConfig = {
                botId: (_b = botAadAppState.botId) !== null && _b !== void 0 ? _b : "",
                botPassword: (_c = botAadAppState.botPassword) !== null && _c !== void 0 ? _c : "",
            };
            const botRegistration = new remoteBotRegistration_1.RemoteBotRegistration();
            const startTime = perf_hooks_1.performance.now();
            const createRes = await botRegistration.createBotRegistration(context.m365TokenProvider, args.name, args.name, botConfig, context.logProvider);
            const durationMilliSeconds = perf_hooks_1.performance.now() - startTime;
            if (createRes.isErr()) {
                throw createRes.error;
            }
            botAadAppState.botId = createRes.value.botId;
            botAadAppState.botPassword = createRes.value.botPassword;
            const outputs = utils_1.mapStateToEnv(botAadAppState, outputEnvVarNames);
            const isReusingExisting = !(!botConfig.botId || !botConfig.botPassword);
            const successCreateBotAadLog = localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.successCreateBotAad, createRes.value.botId);
            const useExistingBotAadLog = localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.useExistingBotAad, botConfig.botId);
            const summary = isReusingExisting ? useExistingBotAadLog : successCreateBotAadLog;
            (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.info(summary);
            (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.successExecuteDriver, actionName));
            context.telemetryReporter.sendTelemetryEvent(successRegisterBotAad, {
                [propertyKeys.reusingExistingBotAad]: isReusingExisting.toString(),
                [propertyKeys.registerBotAadTime]: durationMilliSeconds.toString(),
            });
            return {
                output: outputs,
                summaries: [summary],
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_f = context.logProvider) === null || _f === void 0 ? void 0 : _f.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, error.displayMessage));
                throw error;
            }
            if (axios_1.default.isAxiosError(error)) {
                const message = JSON.stringify((_g = error.response) === null || _g === void 0 ? void 0 : _g.data);
                (_h = context.logProvider) === null || _h === void 0 ? void 0 : _h.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, message));
                if (error.response.status >= 400 && error.response.status < 500) {
                    throw new common_2.UnhandledUserError(new Error(error.response.data), actionName, helpLink);
                }
                else {
                    throw new common_2.UnhandledError(new Error(error.response.data), actionName);
                }
            }
            if (error.name === "AadCreateAppError") {
                throw new common_2.UnhandledUserError(new Error(error.details[0]), actionName);
            }
            const message = JSON.stringify(error);
            (_j = context.logProvider) === null || _j === void 0 ? void 0 : _j.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, message));
            throw new common_2.UnhandledError(error, actionName);
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (invalidParameters.length > 0) {
            throw new common_2.InvalidActionInputError(actionName, invalidParameters, helpLink);
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateBotAadAppDriver.prototype, "run", null);
tslib_1.__decorate([
    lib_1.hooks([
        addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName),
        updateProgress_1.updateProgress(localizeUtils_1.getLocalizedString(constants_2.progressBarKeys.creatingBotAadApp)),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Map]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateBotAadAppDriver.prototype, "execute", null);
CreateBotAadAppDriver = tslib_1.__decorate([
    typedi_1.Service(actionName) // DO NOT MODIFY the service name
], CreateBotAadAppDriver);
exports.CreateBotAadAppDriver = CreateBotAadAppDriver;
//# sourceMappingURL=create.js.map