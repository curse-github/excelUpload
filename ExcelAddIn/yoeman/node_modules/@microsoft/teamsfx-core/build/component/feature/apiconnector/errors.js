// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorMessage = void 0;
const localizeUtils_1 = require("../../../common/localizeUtils");
class ErrorMessage {
    static getMessages(key, ...params) {
        return {
            defaultMsg: localizeUtils_1.getDefaultString(key, ...params),
            localizedMsg: localizeUtils_1.getLocalizedString(key, ...params),
        };
    }
}
exports.ErrorMessage = ErrorMessage;
ErrorMessage.ApiConnectorInputError = {
    name: "ApiConnectorInputError",
    message: (key) => ErrorMessage.getMessages("error.apiConnector.ApiConnectorInputError", key),
};
ErrorMessage.ApiConnectorPathError = {
    name: "ApiConnectorPathNotExistError",
    message: (pathName) => ErrorMessage.getMessages("error.apiConnector.ApiConnectorPathNotExistError", pathName),
};
ErrorMessage.ApiConnectorFileCreateFailError = {
    name: "ApiConnectorCreateFileFail",
    message: (pathName) => ErrorMessage.getMessages("error.apiConnector.ApiConnectorCreateFileFail", pathName),
};
ErrorMessage.ApiConnectorRouteError = {
    name: "ApiConnectorFunctionRouteError",
    message: (funcName) => ErrorMessage.getMessages("error.apiConnector.ApiConnectorFunctionRouteError", funcName),
};
ErrorMessage.SampleCodeCreateFailError = {
    name: "SampleCodeCreateFailError",
    message: (pathName, reason) => ErrorMessage.getMessages("error.apiConnector.SampleCodeCreateFailError", pathName, reason),
};
ErrorMessage.NoValidCompoentExistError = {
    name: "NoBotOrFunctionExistError",
    message: () => ErrorMessage.getMessages("error.apiConnector.NoBotOrFunctionExistError"),
};
ErrorMessage.NoActivePluginsExistError = {
    name: "NoActivePluginsExistError",
    message: () => ErrorMessage.getMessages("error.apiConnector.NoActivePluginsExistError"),
};
ErrorMessage.generateApiConFilesError = {
    name: "ScaffoldApiFilesError",
    message: (reason) => ErrorMessage.getMessages("error.apiConnector.ScaffoldApiFilesError", reason),
};
ErrorMessage.sdkVersionImcompatibleError = {
    name: "SDKVersionImcompatibleError",
    message: (component, localVersion, targetVersion) => ErrorMessage.getMessages("error.apiConnector.SDKVersionImcompatibleError", component, localVersion, targetVersion),
};
ErrorMessage.localPkgFileNotExistError = {
    name: "pkgFileNotExistError",
    message: (component) => ErrorMessage.getMessages("error.apiConnector.pkgFileNotExistError", component),
};
ErrorMessage.componentNotExistError = {
    name: "componentNotExistError",
    message: (component) => ErrorMessage.getMessages("error.apiConnector.componentNotExistError", component),
};
ErrorMessage.envVarExistError = {
    name: "envVarExistError",
    message: (varName) => ErrorMessage.getMessages("error.apiConnector.envVarExistError", varName),
};
//# sourceMappingURL=errors.js.map