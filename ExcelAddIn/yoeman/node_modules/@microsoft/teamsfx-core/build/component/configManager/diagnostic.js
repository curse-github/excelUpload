"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YAMLDiagnostics = void 0;
/**
 * @author yefuwang@microsoft.com
 */
const yamlValidation_1 = require("yaml-language-server/lib/umd/languageservice/services/yamlValidation");
const yamlSchemaService_1 = require("yaml-language-server/lib/umd/languageservice/services/yamlSchemaService");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
// A telemetry class that does nothing, used to initialize YAMLValidation below.
class DummyTelemetry {
    send() { }
    sendError() { }
    sendTrack() { }
}
class YAMLDiagnostics {
    constructor(schemaPath, schemaString) {
        this.schemaPath = schemaPath;
        this.schemaString = schemaString;
        const schemaService = new yamlSchemaService_1.YAMLSchemaService(async () => {
            return this.schemaString;
        });
        schemaService.registerExternalSchema(schemaPath, ["*teamsapp.*yml"]);
        this.validator = new yamlValidation_1.YAMLValidation(schemaService, new DummyTelemetry());
        this.validator.configure({
            validate: true,
            yamlVersion: "1.2",
            disableAdditionalProperties: true,
            customTags: [],
        });
        this.cache = new Map();
    }
    async doValidation(yamlPath, yamlString) {
        var _a;
        const [cachedYamlString, cachedVersion] = (_a = this.cache.get(yamlPath)) !== null && _a !== void 0 ? _a : [yamlString, 0];
        const version = yamlString === cachedYamlString ? cachedVersion : cachedVersion + 1;
        // Need to bump version to work around the internal cache of yaml language server
        const textDocument = vscode_languageserver_textdocument_1.TextDocument.create(`file://${yamlPath}`, "yaml", version, yamlString);
        this.cache.set(yamlPath, [yamlString, version]);
        const diagnostics = await this.validator.doValidation(textDocument, false);
        return diagnostics
            .map((diag) => `[line ${diag.range.start.line + 1}] ${diag.message}`)
            .join(" ");
    }
}
exports.YAMLDiagnostics = YAMLDiagnostics;
//# sourceMappingURL=diagnostic.js.map