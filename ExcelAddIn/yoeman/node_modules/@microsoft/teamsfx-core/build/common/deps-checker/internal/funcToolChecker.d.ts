import { DependencyStatus, DepsChecker, FuncInstallOptions } from "../depsChecker";
import { DepsCheckerError } from "../depsError";
import { DepsLogger } from "../depsLogger";
import { DepsTelemetry } from "../depsTelemetry";
declare type FuncVersion = {
    majorVersion: number;
    minorVersion: number;
    patchVersion: number;
    versionStr: string;
};
export declare class FuncToolChecker implements DepsChecker {
    private telemetryProperties;
    constructor(logger?: DepsLogger, telemetry?: DepsTelemetry);
    getDepsInfo(funcVersion: FuncVersion | undefined, binFolder: string | undefined, error?: DepsCheckerError): Promise<DependencyStatus>;
    resolve(installOptions: FuncInstallOptions): Promise<DependencyStatus>;
    getInstallationInfo(installOptions: FuncInstallOptions): Promise<DependencyStatus>;
    private getNodeVersion;
    private checkExpectedFuncAndNode;
    private checkPortableFuncVersion;
    private checkFuncVersion;
    private getVersioningPortableFunc;
    private install;
    private static getDefaultInstallPath;
    private static getFuncInstallPath;
    private static getVersioningSentinelPath;
    private static getHistorySentinelPath;
    private static getPortableFuncBinFolder;
    private queryFuncVersion;
    private hasNPM;
    private cleanup;
    private installFunc;
    private getExecCommand;
}
export declare function mapToFuncToolsVersion(output: string): FuncVersion;
export declare function isFuncVersionSupport(actualFuncVersion: FuncVersion, expectedFuncVersion: string): boolean;
export {};
//# sourceMappingURL=funcToolChecker.d.ts.map