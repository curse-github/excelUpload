"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sampleProvider = void 0;
const tslib_1 = require("tslib");
const samples_config_json_1 = tslib_1.__importDefault(require("./samples-config.json"));
const samples_config_v3_json_1 = tslib_1.__importDefault(require("./samples-config-v3.json"));
const tools_1 = require("./tools");
const utils_1 = require("../component/generator/utils");
const axios_1 = tslib_1.__importDefault(require("axios"));
class configInfo {
}
configInfo.owner = "OfficeDev";
configInfo.repo = "TeamsFx-Samples";
configInfo.tree = "v2.2.0";
configInfo.file = ".config/samples-config-v3.json";
class SampleProvider {
    async fetchSampleConfig() {
        this.sampleConfigs = undefined;
        try {
            const fileResponse = await utils_1.sendRequestWithTimeout(async () => {
                return await axios_1.default.get(`https://raw.githubusercontent.com/${configInfo.owner}/${configInfo.repo}/${configInfo.tree}/${configInfo.file}`, { responseType: "json" });
            }, 1000, 3);
            if (fileResponse && fileResponse.data) {
                this.sampleConfigs = fileResponse.data;
            }
        }
        catch (e) {
            this.sampleConfigs = undefined;
        }
    }
    get SampleCollection() {
        var _a;
        let samples;
        if (tools_1.isV3Enabled()) {
            samples = ((_a = this.sampleConfigs) !== null && _a !== void 0 ? _a : samples_config_v3_json_1.default).samples.map((sample) => {
                var _a, _b, _c;
                return {
                    id: sample.id,
                    title: sample.title,
                    shortDescription: sample.shortDescription,
                    fullDescription: sample.fullDescription,
                    tags: sample.tags,
                    time: sample.time,
                    configuration: sample.configuration,
                    link: (_a = sample.packageLink) !== null && _a !== void 0 ? _a : ((_b = this.sampleConfigs) !== null && _b !== void 0 ? _b : samples_config_v3_json_1.default).defaultPackageLink,
                    suggested: sample.suggested,
                    url: sample.relativePath && sample.url
                        ? sample.url
                        : `${((_c = this.sampleConfigs) !== null && _c !== void 0 ? _c : samples_config_v3_json_1.default).baseUrl}${sample.id}`,
                    relativePath: sample.relativePath,
                };
            });
        }
        else {
            samples = samples_config_json_1.default.samples.map((sample) => {
                var _a, _b;
                return {
                    id: sample.id,
                    title: sample.title,
                    shortDescription: sample.shortDescription,
                    fullDescription: sample.fullDescription,
                    tags: sample.tags,
                    time: sample.time,
                    configuration: sample.configuration,
                    link: (_a = sample.packageLink) !== null && _a !== void 0 ? _a : samples_config_json_1.default.defaultPackageLink,
                    suggested: sample.suggested,
                    url: sample.relativePath ? sample.url : (_b = sample.url) !== null && _b !== void 0 ? _b : samples_config_json_1.default.baseUrl,
                    relativePath: sample.relativePath,
                };
            });
        }
        // remove video filter sample app if feature flag is disabled.
        if (!tools_1.isVideoFilterEnabled()) {
            const videoFilterSampleId = "teams-videoapp-sample";
            const index = samples.findIndex((sample) => sample.id === videoFilterSampleId);
            if (index !== -1) {
                samples.splice(index, 1);
            }
        }
        this.sampleCollection = {
            samples,
        };
        return this.sampleCollection;
    }
}
exports.sampleProvider = new SampleProvider();
//# sourceMappingURL=samples.js.map