"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageService = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const form_data_1 = tslib_1.__importDefault(require("form-data"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../tools");
const error_1 = require("../../core/error");
// Call m365 service for package CRUD
class PackageService {
    constructor(endpoint, logger) {
        this.axiosInstance = axios_1.default.create({
            timeout: 30000,
        });
        this.initEndpoint = endpoint;
        this.logger = logger;
    }
    async getTitleServiceUrl(token) {
        var _a, _b;
        try {
            const envInfo = await this.axiosInstance.get("/config/v1/environment", {
                baseURL: this.initEndpoint,
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(JSON.stringify(envInfo.data));
            return envInfo.data.titlesServiceUrl;
        }
        catch (error) {
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.error(`Get ServiceUrl failed. ${error.message}`);
            throw error;
        }
    }
    async sideLoading(token, manifestPath) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        try {
            const data = await fs_extra_1.default.readFile(manifestPath);
            const content = new form_data_1.default();
            content.append("package", data);
            const serviceUrl = await this.getTitleServiceUrl(token);
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info("Uploading package ...");
            const uploadHeaders = content.getHeaders();
            uploadHeaders["Authorization"] = `Bearer ${token}`;
            const uploadResponse = await this.axiosInstance.post("/dev/v1/users/packages", content.getBuffer(), {
                baseURL: serviceUrl,
                headers: uploadHeaders,
            });
            const operationId = uploadResponse.data.operationId;
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`Package uploaded. OperationId: ${operationId}`);
            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.info("Acquiring package ...");
            const acquireResponse = await this.axiosInstance.post("/dev/v1/users/packages/acquisitions", {
                operationId: operationId,
            }, {
                baseURL: serviceUrl,
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });
            const statusId = acquireResponse.data.statusId;
            (_d = this.logger) === null || _d === void 0 ? void 0 : _d.debug(`Acquiring package with statusId: ${statusId} ...`);
            do {
                const statusResponse = await this.axiosInstance.get(`/dev/v1/users/packages/status/${statusId}`, {
                    baseURL: serviceUrl,
                    headers: { Authorization: `Bearer ${token}` },
                });
                const resCode = statusResponse.status;
                if (resCode === 200) {
                    const titleId = statusResponse.data.titleId;
                    const appId = statusResponse.data.appId;
                    (_e = this.logger) === null || _e === void 0 ? void 0 : _e.info(`TitleId: ${titleId}`);
                    (_f = this.logger) === null || _f === void 0 ? void 0 : _f.info(`AppId: ${appId}`);
                    (_g = this.logger) === null || _g === void 0 ? void 0 : _g.info("Sideloading done.");
                    return [titleId, appId];
                }
                else {
                    await tools_1.waitSeconds(2);
                }
            } while (true);
        }
        catch (error) {
            (_h = this.logger) === null || _h === void 0 ? void 0 : _h.error("Sideloading failed.");
            if (error.response) {
                (_j = this.logger) === null || _j === void 0 ? void 0 : _j.error(JSON.stringify(error.response.data));
                this.traceError(error);
            }
            else {
                (_k = this.logger) === null || _k === void 0 ? void 0 : _k.error(error.message);
            }
            throw teamsfx_api_1.assembleError(error, error_1.CoreSource);
        }
    }
    async getLaunchInfoByManifestId(token, manifestId) {
        var _a, _b, _c, _d, _e;
        try {
            const serviceUrl = await this.getTitleServiceUrl(token);
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info(`Getting LaunchInfo with ManifestId ${manifestId} ...`);
            const launchInfo = await this.axiosInstance.post("/catalog/v1/users/titles/launchInfo", {
                Id: manifestId,
                IdType: "ManifestId",
                Filter: {
                    SupportedElementTypes: [
                        // "Extensions", // Extensions require ClientDetails to be determined later
                        "OfficeAddIns",
                        "ExchangeAddIns",
                        "FirstPartyPages",
                        "Dynamics",
                        "AAD",
                        "LineOfBusiness",
                        "StaticTabs",
                        "ComposeExtensions",
                        "Bots",
                        "GraphConnector",
                        "ConfigurableTabs",
                        "Activities",
                        "MeetingExtensionDefinition",
                    ],
                },
            }, {
                baseURL: serviceUrl,
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(JSON.stringify(launchInfo.data));
            return launchInfo.data;
        }
        catch (error) {
            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("Get LaunchInfo failed.");
            if (error.response) {
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(JSON.stringify(error.response.data));
                this.traceError(error);
            }
            else {
                (_e = this.logger) === null || _e === void 0 ? void 0 : _e.error(error.message);
            }
            throw teamsfx_api_1.assembleError(error, error_1.CoreSource);
        }
    }
    async retrieveTitleId(token, manifestId) {
        var _a, _b, _c, _d, _e;
        const launchInfo = await this.getLaunchInfoByManifestId(token, manifestId);
        const titleId = (_c = (_b = (_a = launchInfo.acquisition) === null || _a === void 0 ? void 0 : _a.titleId) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : (_d = launchInfo.acquisition) === null || _d === void 0 ? void 0 : _d.titleId;
        (_e = this.logger) === null || _e === void 0 ? void 0 : _e.debug(`TitleId: ${titleId}`);
        return titleId;
    }
    async retrieveAppId(token, manifestId) {
        var _a, _b;
        const launchInfo = await this.getLaunchInfoByManifestId(token, manifestId);
        const appId = (_a = launchInfo.acquisition) === null || _a === void 0 ? void 0 : _a.appId;
        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`AppId: ${appId}`);
        return appId;
    }
    async unacquire(token, titleId) {
        var _a, _b, _c, _d, _e;
        try {
            const serviceUrl = await this.getTitleServiceUrl(token);
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info(`Unacquiring package with TitleId ${titleId} ...`);
            await this.axiosInstance.delete(`/catalog/v1/users/acquisitions/${titleId}`, {
                baseURL: serviceUrl,
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.info("Unacquiring done.");
        }
        catch (error) {
            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("Unacquire failed.");
            if (error.response) {
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(JSON.stringify(error.response.data));
                this.traceError(error);
            }
            else {
                (_e = this.logger) === null || _e === void 0 ? void 0 : _e.error(error.message);
            }
            throw teamsfx_api_1.assembleError(error, error_1.CoreSource);
        }
    }
    async getLaunchInfoByTitleId(token, titleId) {
        var _a, _b, _c, _d, _e;
        try {
            const serviceUrl = await this.getTitleServiceUrl(token);
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info(`Getting LaunchInfo with TitleId ${titleId} ...`);
            const launchInfo = await this.axiosInstance.get(`/catalog/v1/users/titles/${titleId}/launchInfo`, {
                baseURL: serviceUrl,
                params: {
                    SupportedElementTypes: 
                    // eslint-disable-next-line no-secrets/no-secrets
                    "Extensions,OfficeAddIns,ExchangeAddIns,FirstPartyPages,Dynamics,AAD,LineOfBusiness,StaticTabs,ComposeExtensions,Bots,GraphConnector,ConfigurableTabs,Activities,MeetingExtensionDefinition",
                },
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.info(JSON.stringify(launchInfo.data));
            return launchInfo.data;
        }
        catch (error) {
            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("Get LaunchInfo failed.");
            if (error.response) {
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(JSON.stringify(error.response.data));
                this.traceError(error);
            }
            else {
                (_e = this.logger) === null || _e === void 0 ? void 0 : _e.error(error.message);
            }
            throw teamsfx_api_1.assembleError(error, error_1.CoreSource);
        }
    }
    traceError(error) {
        var _a, _b, _c;
        // add error details and trace to message
        const detail = JSON.stringify((_a = error.response.data) !== null && _a !== void 0 ? _a : {});
        const tracingId = (_c = (_b = error.response.headers) === null || _b === void 0 ? void 0 : _b.traceresponse) !== null && _c !== void 0 ? _c : "";
        const originalMessage = error.message;
        error.message = JSON.stringify({
            message: originalMessage,
            detail: detail,
            tracingId: tracingId,
        });
    }
}
exports.PackageService = PackageService;
//# sourceMappingURL=packageService.js.map