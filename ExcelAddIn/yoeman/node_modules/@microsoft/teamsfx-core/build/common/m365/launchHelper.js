"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.LaunchHelper = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const error_1 = require("../../core/error");
const tools_1 = require("../tools");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const packageService_1 = require("./packageService");
const serviceConstant_1 = require("./serviceConstant");
class LaunchHelper {
    constructor(m365TokenProvider, logger) {
        this.m365TokenProvider = m365TokenProvider;
        this.logger = logger;
    }
    async getLaunchUrl(hub, teamsAppId, capabilities, withLoginHint = true) {
        var _a;
        const loginHint = withLoginHint
            ? (_a = (await this.getUpnFromToken())) !== null && _a !== void 0 ? _a : "login_your_m365_account" // a workaround that user has the chance to login
            : undefined;
        let url;
        switch (hub) {
            case constants_1.Hub.teams: {
                const baseUrl = `https://teams.microsoft.com/l/app/${teamsAppId}?installAppPackage=true&webjoin=true`;
                url = new URL(baseUrl);
                const tid = await this.getTidFromToken();
                if (tid) {
                    url.searchParams.append("appTenantId", tid);
                }
                break;
            }
            case constants_1.Hub.outlook: {
                const result = await this.getM365AppId(teamsAppId);
                if (result.isErr()) {
                    return teamsfx_api_1.err(result.error);
                }
                const baseUrl = capabilities.includes("staticTab")
                    ? `https://outlook.office.com/host/${result.value}`
                    : "https://outlook.office.com/mail";
                url = new URL(baseUrl);
                break;
            }
            case constants_1.Hub.office:
                {
                    const result = await this.getM365AppId(teamsAppId);
                    if (result.isErr()) {
                        return teamsfx_api_1.err(result.error);
                    }
                    const baseUrl = `https://www.office.com/m365apps/${result.value}?auth=2`;
                    url = new URL(baseUrl);
                }
                break;
        }
        if (loginHint) {
            url.searchParams.append("login_hint", loginHint);
        }
        return teamsfx_api_1.ok(url.toString());
    }
    async getM365AppId(teamsAppId) {
        var _a, _b, _c;
        const sideloadingServiceEndpoint = (_a = process.env.SIDELOADING_SERVICE_ENDPOINT) !== null && _a !== void 0 ? _a : serviceConstant_1.serviceEndpoint;
        const sideloadingServiceScope = (_b = process.env.SIDELOADING_SERVICE_SCOPE) !== null && _b !== void 0 ? _b : serviceConstant_1.serviceScope;
        const packageService = new packageService_1.PackageService(sideloadingServiceEndpoint, this.logger);
        const sideloadingTokenRes = await this.m365TokenProvider.getAccessToken({
            scopes: [sideloadingServiceScope],
        });
        if (sideloadingTokenRes.isErr()) {
            return teamsfx_api_1.err(sideloadingTokenRes.error);
        }
        const sideloadingToken = sideloadingTokenRes.value;
        try {
            const m365AppId = await packageService.retrieveAppId(sideloadingToken, teamsAppId);
            if (!m365AppId) {
                return teamsfx_api_1.err(new errors_1.NotExtendedToM365Error(error_1.CoreSource));
            }
            return teamsfx_api_1.ok(m365AppId);
        }
        catch (error) {
            if (((_c = error.innerError) === null || _c === void 0 ? void 0 : _c.response.status) === 404) {
                return teamsfx_api_1.err(new errors_1.NotExtendedToM365Error(error_1.CoreSource));
            }
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error));
        }
    }
    async getTidFromToken() {
        try {
            const statusRes = await this.m365TokenProvider.getStatus({ scopes: tools_1.AppStudioScopes });
            const tokenObject = statusRes.isOk() ? statusRes.value.accountInfo : undefined;
            return tokenObject === null || tokenObject === void 0 ? void 0 : tokenObject.tid;
        }
        catch (_a) {
            return undefined;
        }
    }
    async getUpnFromToken() {
        try {
            const statusRes = await this.m365TokenProvider.getStatus({ scopes: tools_1.AppStudioScopes });
            const tokenObject = statusRes.isOk() ? statusRes.value.accountInfo : undefined;
            return tokenObject === null || tokenObject === void 0 ? void 0 : tokenObject.upn;
        }
        catch (_a) {
            return undefined;
        }
    }
}
exports.LaunchHelper = LaunchHelper;
//# sourceMappingURL=launchHelper.js.map